---
import BaseLayout from "../../layouts/BaseLayout.astro";
import HorizontalCard from "../../components/HorizontalCard.astro";

const allProjects = (await Astro.glob("./*.{md,mdx}")).sort(
  (a, b) => new Date(b.frontmatter.pubDate).valueOf() - new Date(a.frontmatter.pubDate).valueOf()
);

// Extract all unique categories from all projects
const allCategories = [...new Set(allProjects.flatMap(project => project.frontmatter.categories || []))].sort();
---

<BaseLayout>
  <div class="mb-10">
    <div class="text-3xl page-header font-bold mb-5">projects</div>
    <div class="text-xl mb-5 page-subheader">List of all of my projects</div>
  </div>

  <!-- Search and Filter Controls -->
  <div class="mb-8 space-y-4">
    <!-- Search Bar -->
    <div class="form-control">
      <input
        type="text"
        id="searchInput"
        placeholder="Search projects by title, description, or tags..."
        class="input input-bordered w-full search-input"
      />
    </div>

    <!-- Category Filter Buttons -->
    <div class="flex flex-wrap gap-2">
      <button
        class="btn btn-sm category-filter active"
        data-category="all"
      >
        All
      </button>
      {allCategories.map(cat => (
        <button
          class="btn btn-sm category-filter"
          data-category={cat}
        >
          {cat}
        </button>
      ))}
    </div>
  </div>

  <!-- Projects Grid -->
  <div class="project-grid" id="projectGrid">
    {allProjects.map((project) => (
      <div
        class="project-card"
        data-title={project.frontmatter.title.toLowerCase()}
        data-desc={project.frontmatter.description.toLowerCase()}
        data-tags={(project.frontmatter.tags || []).join(',').toLowerCase()}
        data-categories={(project.frontmatter.categories || []).join(',')}
      >
        <HorizontalCard
          title={project.frontmatter.title}
          img={project.frontmatter.heroImage}
          desc={project.frontmatter.description}
          url={project.url}
          date={project.frontmatter.pubDate}
          tags={project.frontmatter.tags}
          badge={project.frontmatter.badge}
          target="_self"
        />
      </div>
    ))}
  </div>

  <!-- No Results Message -->
  <div id="noResults" class="text-center py-10 hidden">
    <p class="text-lg opacity-70">No projects found matching your criteria.</p>
  </div>

  <!-- Pagination -->
  <div class="flex justify-center items-center gap-2 my-10" id="pagination">
    <button id="prevPage" class="btn btn-ghost btn-sm">
      <svg class="h-5 w-5 fill-current" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z"></path>
      </svg>
    </button>

    <div id="pageNumbers" class="flex gap-2"></div>

    <button id="nextPage" class="btn btn-ghost btn-sm">
      <svg class="h-5 w-5 fill-current" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z"></path>
      </svg>
    </button>
  </div>
</BaseLayout>

<script>
  // Client-side filtering and pagination across ALL projects
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const categoryButtons = document.querySelectorAll('.category-filter');
  const projectCards = document.querySelectorAll('.project-card');
  const noResults = document.getElementById('noResults');
  const pagination = document.getElementById('pagination');
  const pageNumbers = document.getElementById('pageNumbers');
  const prevPage = document.getElementById('prevPage');
  const nextPage = document.getElementById('nextPage');

  let activeCategory = 'all';
  let searchTerm = '';
  let currentPage = 1;
  const itemsPerPage = 9;
  let filteredCards: Element[] = [];

  function filterProjects() {
    filteredCards = [];

    projectCards.forEach((card) => {
      const htmlCard = card as HTMLElement;
      const title = htmlCard.dataset.title || '';
      const desc = htmlCard.dataset.desc || '';
      const tags = htmlCard.dataset.tags || '';
      const categories = htmlCard.dataset.categories || '';

      // Check search term
      const matchesSearch = searchTerm === '' ||
        title.includes(searchTerm) ||
        desc.includes(searchTerm) ||
        tags.includes(searchTerm);

      // Check category
      const matchesCategory = activeCategory === 'all' ||
        categories.split(',').includes(activeCategory);

      // Add to filtered list if matches
      if (matchesSearch && matchesCategory) {
        filteredCards.push(card);
      }
    });

    // Reset to page 1 when filters change
    currentPage = 1;
    renderPage();
  }

  function renderPage() {
    const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;

    // Hide all cards first
    projectCards.forEach((card) => {
      (card as HTMLElement).style.display = 'none';
    });

    // Show only cards for current page
    filteredCards.forEach((card, index) => {
      if (index >= startIndex && index < endIndex) {
        (card as HTMLElement).style.display = '';
      }
    });

    // Show/hide no results message
    if (filteredCards.length === 0) {
      noResults?.classList.remove('hidden');
      pagination?.classList.add('hidden');
    } else {
      noResults?.classList.add('hidden');
      pagination?.classList.remove('hidden');
    }

    // Update pagination buttons
    if (pageNumbers) {
      pageNumbers.innerHTML = '';
      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement('button');
        btn.textContent = i.toString();
        btn.className = `btn btn-sm ${i === currentPage ? 'btn-active' : 'btn-ghost'}`;
        btn.addEventListener('click', () => {
          currentPage = i;
          renderPage();
        });
        pageNumbers.appendChild(btn);
      }
    }

    // Update prev/next buttons
    if (prevPage) {
      if (currentPage === 1) {
        prevPage.classList.add('btn-disabled');
      } else {
        prevPage.classList.remove('btn-disabled');
      }
    }

    if (nextPage) {
      if (currentPage === totalPages || totalPages === 0) {
        nextPage.classList.add('btn-disabled');
      } else {
        nextPage.classList.remove('btn-disabled');
      }
    }
  }

  // Search input handler
  searchInput?.addEventListener('input', (e) => {
    searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    filterProjects();
  });

  // Category button handlers
  categoryButtons.forEach((button) => {
    button.addEventListener('click', () => {
      // Update active state
      categoryButtons.forEach(btn => {
        btn.classList.remove('active');
      });
      button.classList.add('active');

      // Update active category
      activeCategory = (button as HTMLElement).dataset.category || 'all';
      filterProjects();
    });
  });

  // Pagination handlers
  prevPage?.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderPage();
    }
  });

  nextPage?.addEventListener('click', () => {
    const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      renderPage();
    }
  });

  // Initial render
  filterProjects();
</script>

<style>
  /* Search bar styling */
  .search-input {
    border-radius: 0;
    border-color: hsl(287, 60%, 65%);
  }

  .search-input:focus {
    outline: 2px solid hsl(287, 60%, 65%);
    outline-offset: 2px;
    border-color: hsl(287, 60%, 65%);
  }

  /* Project grid with max 3 columns and proper sizing */
  .project-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    max-width: 100%;
  }

  @media (min-width: 768px) {
    .project-grid {
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      max-width: 1200px;
    }
  }

  /* Prevent cards from getting too large and ensure equal heights */
  .project-card {
    max-width: 500px;
    width: 100%;
    justify-self: start;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .project-card :global(.horizontal-card) {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .project-card :global(.horizontal-card a) {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .project-card :global(.hero-content) {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .project-card :global(.grow) {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .project-card :global(.card-actions) {
    margin-top: auto;
  }

  /* Category filter button styling */
  .category-filter {
    flex-shrink: 0;
    white-space: nowrap;
  }

  .category-filter.active {
    color: hsl(var(--pc));
    border-color: hsl(var(--p));
    transform: scale(1.05) !important;
  }

  .category-filter:not(.active) {
    background-color: transparent;
    border-color: hsl(var(--bc) / 0.2);
  }

  .category-filter:not(.active):hover {
    background-color: hsl(var(--bc) / 0.1);
    border-color: hsl(var(--bc) / 0.3);
  }
</style>
